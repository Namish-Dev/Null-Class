# -*- coding: utf-8 -*-
"""Task-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mXBqMH2OB_08JeyibcclP7maRvIP3WaC
"""

import tkinter as tk
from tkinter import messagebox
import speech_recognition as sr
import datetime
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.sequence import pad_sequences
import time

#  Load Pretrained Model
try:
    model = load_model('bidirectional_translation_model.h5')
except Exception as e:
    print("Model load failed:", e)
    model = None

#  Time Constraint Check
def is_translation_time():
    now = datetime.datetime.now().time()
    start = datetime.time(21, 0)
    end = datetime.time(22, 0)
    return start <= now <= end

#  Check if word starts with vowel
def starts_with_vowel(word):
    vowels = 'aeiouAEIOU'
    return word and word[0] in vowels

#  Check if text contains words starting with vowels
def contains_vowel_starting_words(text):
    words = text.split()
    vowel_words = [word for word in words if starts_with_vowel(word)]
    return vowel_words

#  Preprocess and Postprocess
def preprocess_text(text):
    return text.lower()

def pad(seq, max_len):
    return pad_sequences(seq, maxlen=max_len, padding='post')

def logits_to_text(logits, tokenizer):
    index_to_word = {v: k for k, v in tokenizer.word_index.items()}
    output = ""
    for index in np.argmax(logits, axis=1):
        if index == 0:
            continue
        word = index_to_word.get(index, '')
        if word == 'end_':
            break
        output += word + " "
    return output.strip()

#  Voice Recognition
def get_voice_input():
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print(" Speak now...")
        r.adjust_for_ambient_noise(source)
        audio = r.listen(source)
    try:
        return r.recognize_google(audio)
    except sr.UnknownValueError:
        return None
    except sr.RequestError:
        return None

# Translation
def translate():
    input_text = get_voice_input()
    if not input_text:
        output_label.config(text=" Could not understand, please repeat.")
        return

    vowel_words = contains_vowel_starting_words(input_text)

    if vowel_words:
        if is_translation_time():
            try:
                cleaned = preprocess_text(input_text)
                #  seq = english_tokenizer.texts_to_sequences([cleaned])
                #  padded = pad(seq, max_hindi_sequence_length)
                #  preds = model.predict(padded)[0]
                #  translated = logits_to_text(preds, hindi_tokenizer)

                translated = "[Translation would appear here]"
                output_label.config(text=f"EN: {input_text}\nHI: {translated}")
            except Exception as e:
                output_label.config(text=f" Error: {e}")
        else:
            vowel_word_list = ", ".join(vowel_words)
            output_label.config(
                text=f"Words starting with vowels detected: {vowel_word_list}\n"
                     f"These words start with vowels. Please provide words that don't start with vowels,\n"
                     f"or try again between 9 PM and 10 PM."
            )
    else:
        if not is_translation_time():
            output_label.config(text=" Taking rest, see you tomorrow!")
            return

        try:
            cleaned = preprocess_text(input_text)
            #  seq = english_tokenizer.texts_to_sequences([cleaned])
            #  padded = pad(seq, max_hindi_sequence_length)
            #  preds = model.predict(padded)[0]
            #  translated = logits_to_text(preds, hindi_tokenizer)

            translated = "[Translation would appear here]"
            output_label.config(text=f"EN: {input_text}\nHI: {translated}")
        except Exception as e:
            output_label.config(text=f" Error: {e}")

#  GUI
root = tk.Tk()
root.title("English to Hindi Voice Translator")
root.geometry("600x400")
root.configure(bg="#f0f0f0")

tk.Label(
    root,
    text=" English to Hindi Voice Translator",
    font=("Helvetica", 16, "bold"),
    bg="#f0f0f0"
).pack(pady=15)

tk.Label(
    root,
    text=" Words starting with vowels (A, E, I, O, U) can only be translated between 9 PM - 10 PM\n"
         " Other words can be translated anytime during regular hours (9:30 PM - 10 PM)\n"
         " Click 'Translate' and speak clearly",
    font=("Helvetica", 10),
    bg="#f0f0f0",
    justify="left"
).pack(pady=10)

tk.Button(
    root,
    text=" Translate",
    command=translate,
    font=("Helvetica", 14, "bold"),
    bg="#4CAF50",
    fg="white",
    padx=20,
    pady=10
).pack(pady=15)

output_label = tk.Label(
    root,
    text="Ready to translate...",
    font=("Helvetica", 12),
    wraplength=550,
    justify="left",
    bg="#f0f0f0",
    relief="solid",
    borderwidth=1,
    padx=10,
    pady=10
)
output_label.pack(pady=20, padx=20, fill="both", expand=True)

tk.Label(
    root,
    text="Status: Ready",
    font=("Helvetica", 9),
    bg="#e0e0e0",
    relief="sunken"
).pack(side="bottom", fill="x")

root.mainloop()